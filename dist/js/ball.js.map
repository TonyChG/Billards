{"version":3,"sources":["../../js/ball.js"],"names":["Ball","cfg","pos","Vect2D","px","py","vet","vx","vy","rad","mass","color","mouseOn","selected","ctx","drawCircle","x","y","circleColor","COLORS","orange","DEBUG","fillStyle","font","fillText","toString","mx","my","width","height","RADIUS","invertX","invertY","ball","dx","dy","Math","sqrt","angle","sin","cos","b1","b2","nvt1","length","nvt2","dir1","atan2","dir2","vtx1","vty1","vtx2","vty2","fvx1","fvx2","nvtx1","PI","nvty1","nvtx2","nvty2","cx","floor","cy","dist","abs","replaceBalls","newVel","computeNewVelocity","round","V_MIN","FRICTION","add"],"mappings":"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","file":"ball.js","sourcesContent":["/**\n * Created by antoine on 28/01/17.\n */\n\n// BALL\nclass Ball {\n    constructor(cfg) {\n\n        this.pos = new Vect2D(cfg.px, cfg.py);\n        this.vet = new Vect2D(cfg.vx, cfg.vy);\n\n        this.rad   = cfg.rad;\n        this.mass  = cfg.mass;\n        this.color = cfg.color;\n\n        this.mouseOn  = false;\n        this.selected = false;\n\n    }\n\n    get x ()    { return this.pos.x }\n    get y ()    { return this.pos.y }\n    set x (x)   { this.pos.x = x }\n    set y (y)   { this.pos.y = y }\n    get vx ()   { return this.vet.x }\n    get vy ()   { return this.vet.y }\n    set vx (vx) { this.vet.x = vx }\n    set vy (vy) { this.vet.y = vy }\n\n    draw (ctx) {\n        if (this.mouseOn) drawCircle(ctx, this.x, this.y, this.rad+1, \"white\");\n        let circleColor = this.selected ? COLORS.orange : this.color;\n        drawCircle(ctx, this.x, this.y, this.rad, circleColor);\n        if (cfg.DEBUG) {\n            ctx.fillStyle = \"white\";\n            ctx.font = \"9px Arial\";\n            ctx.fillText(this.vet.toString(), this.x - 30, this.y + this.rad + 15);\n        }\n    }\n\n    mouseIsOn (mx, my) {\n        return mx >= this.x - this.rad && mx <= this.x + this.rad\n            && my >= this.y - this.rad && my <= this.y + this.rad;\n    }\n\n    wallCollision (width, height) {\n        if (this.x - this.rad < cfg.RADIUS) {\n            this.x = this.rad*2;\n            this.vet.invertX();\n        } else if (this.x + this.rad > width-cfg.RADIUS) {\n            this.x = width - this.rad*2;\n            this.vet.invertX();\n        }\n        if (this.y - this.rad < cfg.RADIUS) {\n            this.y = this.rad*2;\n            this.vet.invertY();\n        } else if (this.y + this.rad > height-cfg.RADIUS) {\n            this.y = height - this.rad*2;\n            this.vet.invertY();\n        }\n    }\n\n    getDist(ball) {\n        let dx = (this.x - ball.x) * (this.x - ball.x),\n            dy = (this.y - ball.y) * (this.y - ball.y);\n        return Math.sqrt(dx + dy);\n    }\n\n    computeNewVelocity (ball, angle, sin, cos) {\n        let b1 = this, b2 = ball,\n            nvt1 = b1.vet.length(),\n            nvt2 = b2.vet.length(),\n            dir1 = Math.atan2(b1.vet.y, b1.vet.x),\n            dir2 = Math.atan2(b2.vet.y, b2.vet.x),\n            vtx1 = nvt1 * Math.cos(dir1 - angle),\n            vty1 = nvt1 * Math.sin(dir1 - angle),\n            vtx2 = nvt2 * Math.cos(dir2 - angle),\n            vty2 = nvt2 * Math.sin(dir2 - angle),\n            fvx1 = ((b1.rad - b2.rad) * vtx1 + (2 * b2.rad) * vtx2) / (b1.rad + b2.rad),\n            fvx2 = ((2 * b1.rad) * vtx1 + (b2.rad - b1.rad) * vtx2) / (b1.rad + b2.rad);\n\n        return {\n            nvtx1: cos * fvx1 + Math.cos(angle + Math.PI / 2) * vty1,\n            nvty1: sin * fvx1 + Math.sin(angle + Math.PI / 2) * vty1,\n            nvtx2: cos * fvx2 + Math.cos(angle + Math.PI / 2) * vty2,\n            nvty2: sin * fvx2 + Math.sin(angle + Math.PI / 2) * vty2\n        };\n    }\n\n    replaceBalls (ball, sin, cos) {\n        let b1 = this, b2 = ball,\n            cx = Math.floor((b1.x + b2.x)/2),\n            cy = Math.floor((b1.y + b2.y)/2);\n        b1.x = cx + b1.rad * cos;\n        b1.y = cy + b1.rad * sin;\n        b2.x = cx - b2.rad * cos;\n        b2.y = cy - b2.rad * sin;\n    }\n\n    resolveCollision(ball) {\n        let b1 = this, b2 = ball,\n            dx = b1.x - b2.x,\n            dy = b1.y - b2.y,\n            angle = Math.atan2(dy, dx),\n            sin = Math.sin(angle),\n            cos = Math.cos(angle),\n            dist  = Math.sqrt(dx * dx + dy * dy);\n\n        if (Math.abs(dx) + Math.abs(dy) != 0 && dist < b1.rad + b2.rad - 2) {\n\n            if (dist != b1.rad + b2.rad) this.replaceBalls(ball, sin, cos);\n\n            let newVel = this.computeNewVelocity(ball, angle, sin, cos);\n\n            b1.vet.x = newVel.nvtx1;\n            b1.vet.y = newVel.nvty1;\n            b2.vet.x = newVel.nvtx2;\n            b2.vet.y = newVel.nvty2;\n\n            b1.vet.round(cfg.V_MIN);\n            b2.vet.round(cfg.V_MIN);\n        }\n    }\n\n    applyFriction () {\n        if (cfg.FRICTION != 0) {\n            if (this.vx != 0) this.vx = this.vx * cfg.FRICTION;\n            if (this.vy != 0) this.vy = this.vy * cfg.FRICTION;\n            if (Math.abs(this.vx) <= 0.1) this.vx = 0;\n            if (Math.abs(this.vy) <= 0.1) this.vy = 0;\n            this.vet.round(cfg.V_MIN);\n        }\n    }\n\n    move () {\n        this.pos.add(this.vet);\n    }\n}\n"]}